# SPDX-FileCopyrightText: 2021 Leroy Hopson <glam@leroy.geek.nz>
# SPDX-License-Identifier: MIT
extends Object

const FileScanner := preload("../util/file_scanner.gd")
const LicenseDB := preload("../license/license_db.gd")


static func generate_credits(root := "res://", sources := []) -> String:
	var asset_paths := FileScanner.list_assets_rec(root)

	var credits = """<!--
  SPDX-FileCopyrightText: none
  SPDX-License-Identifier: CC0-1.0

  Do not modify this file! It was generated by GLAM and may be overwritten in
  the future. Please make changes to the '.glam' files instead.
-->

# Credits
"""

	var images := []
	var models := []
	var sound_effects := []
	var textures := []
	var by_source := {none = []}
	var by_type := {}

	for source in sources:
		by_source[source.source.get_id()] = {source = source.source, assets = []}

	for path in FileScanner.list_assets_rec(root):
		var asset: GLAMAsset = load(path)

		if not asset or (not asset.title and asset.authors.empty() and asset.licenses.empty()):
			continue

		if by_source.has(asset.source_id):
			by_source[asset.source_id].assets.append(asset)
		else:
			by_source.none.append(asset)

	for source in by_source.values():
		if source is Array or source.assets.empty():
			continue

		credits += "\n## [%s](%s)" % [source.source.get_display_name(), source.source.get_url()]

		for asset in source.assets:
			credits += "\n%s\n" % create_credit(asset)

	if by_source.has("none") and not by_source["none"].empty():
		credits += "\n## Other"
		for asset in by_source["none"]:
			credits += "\n%s\n" % create_credit(asset)

	return credits


static func create_credit(asset: GLAMAsset, level := 0) -> String:
	var derivative_level := 1
	var strs := PoolStringArray()

	strs.append(_get_title(asset))
	strs.append("by")
	strs.append(_get_authors(asset))
	strs.append("licensed under")
	strs.append(_get_licenses(asset))

	if not asset.notes.empty():
		strs.append("/ %s" % asset.notes)

	var derivatives := _get_derivative_credits(asset, derivative_level)
	if not asset.derived_from.empty():
		strs.append("/ Derived from:\n")
		for source_asset in asset.derived_from:
			assert(source_asset is GLAMAsset, "Expected asset to be GLAMAsset.")
			var next_level = level + 1
			var credit = create_credit(source_asset, next_level)
			strs.append("\n%s- %s" % ["  ".repeat(next_level), credit])

	return strs.join(" ")


static func _get_title(asset: GLAMAsset) -> String:
	var link := _get_link(asset.title, asset.source_url)
	return link if asset.title.empty() or not asset.official_title else '"%s"' % link


static func _get_authors(asset: GLAMAsset) -> String:
	var strs := PoolStringArray()

	if asset.authors.empty():
		strs.append("Unknown")
	else:
		for author in asset.authors:
			strs.append(_get_link(author.name, author.url, "Unknown"))

	return strs.join(", ")


static func _get_licenses(asset: GLAMAsset) -> String:
	var strs := PoolStringArray()

	if asset.licenses.empty():
		strs.append("Unknown License")
	else:
		for license in asset.licenses:
			var details := LicenseDB.get_license(license.identifier)
			var name = (
				details.name
				if license.identifier.begins_with("LicenseRef-")
				else license.identifier
			)
			strs.append(_get_link(name, details.url, "Unknown License"))

	return strs.join(", ")


static func _get_derivative_credits(asset: GLAMAsset, level := 1) -> String:
	return "  ".repeat(level) + "- lol"


static func _get_link(name := "", url := "", default_name := "Untitled") -> String:
	if name and url:
		return "[%s](%s)" % [name, url]
	elif name.empty() and url:
		return "[%s](%s)" % [default_name, url]
	elif name and url.empty():
		return name
	else:
		return default_name
